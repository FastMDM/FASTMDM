diff --git a/node_modules/strapi-plugin-multi-tenant/admin/src/components/Initializer/index.js b/node_modules/strapi-plugin-multi-tenant/admin/src/components/Initializer/index.js
index 71dc50e..7a1b2f5 100644
--- a/node_modules/strapi-plugin-multi-tenant/admin/src/components/Initializer/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/admin/src/components/Initializer/index.js
@@ -4,23 +4,23 @@
  *
  */
 
-import { useEffect, useRef } from 'react';
-import PropTypes from 'prop-types';
-import pluginId from '../../pluginId';
+import { useEffect, useRef } from 'react'
+import PropTypes from 'prop-types'
+import pluginId from '../../pluginId'
 
 const Initializer = ({ setPlugin }) => {
-  const ref = useRef();
-  ref.current = setPlugin;
+  const ref = useRef()
+  ref.current = setPlugin
 
   useEffect(() => {
-    ref.current(pluginId);
-  }, []);
+    ref.current(pluginId)
+  }, [])
 
-  return null;
-};
+  return null
+}
 
 Initializer.propTypes = {
   setPlugin: PropTypes.func.isRequired,
-};
+}
 
-export default Initializer;
+export default Initializer
diff --git a/node_modules/strapi-plugin-multi-tenant/admin/src/components/PluginIcon/index.js b/node_modules/strapi-plugin-multi-tenant/admin/src/components/PluginIcon/index.js
index a7c98f7..4de90a5 100644
--- a/node_modules/strapi-plugin-multi-tenant/admin/src/components/PluginIcon/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/admin/src/components/PluginIcon/index.js
@@ -4,9 +4,9 @@
  *
  */
 
-import React from 'react';
-import Puzzle from '@strapi/icons/Puzzle';
+import React from 'react'
+import Puzzle from '@strapi/icons/Puzzle'
 
-const PluginIcon = () => <Puzzle />;
+const PluginIcon = () => <Puzzle />
 
-export default PluginIcon;
+export default PluginIcon
diff --git a/node_modules/strapi-plugin-multi-tenant/admin/src/index.js b/node_modules/strapi-plugin-multi-tenant/admin/src/index.js
index 585f6a9..87d5871 100644
--- a/node_modules/strapi-plugin-multi-tenant/admin/src/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/admin/src/index.js
@@ -1,10 +1,10 @@
-import { prefixPluginTranslations } from "@strapi/helper-plugin";
-import pluginPkg from "../../package.json";
-import pluginId from "./pluginId";
-import Initializer from "./components/Initializer";
-import PluginIcon from "./components/PluginIcon";
+import { prefixPluginTranslations } from '@strapi/helper-plugin'
+import pluginPkg from '../../package.json'
+import pluginId from './pluginId'
+import Initializer from './components/Initializer'
+import PluginIcon from './components/PluginIcon'
 
-const name = pluginPkg.strapi.name;
+const name = pluginPkg.strapi.name
 
 export default {
   register(app) {
@@ -13,7 +13,7 @@ export default {
       initializer: Initializer,
       isReady: false,
       name,
-    });
+    })
   },
 
   bootstrap(app) {},
@@ -27,17 +27,17 @@ export default {
             return {
               data: prefixPluginTranslations(data, pluginId),
               locale,
-            };
+            }
           })
           .catch(() => {
             return {
               data: {},
               locale,
-            };
-          });
+            }
+          })
       })
-    );
+    )
 
-    return Promise.resolve(importedTrads);
+    return Promise.resolve(importedTrads)
   },
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/admin/src/pages/App/index.js b/node_modules/strapi-plugin-multi-tenant/admin/src/pages/App/index.js
index b2d80ef..b2566da 100644
--- a/node_modules/strapi-plugin-multi-tenant/admin/src/pages/App/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/admin/src/pages/App/index.js
@@ -5,11 +5,11 @@
  *
  */
 
-import React from 'react';
-import { Switch, Route } from 'react-router-dom';
-import { NotFound } from '@strapi/helper-plugin';
-import pluginId from '../../pluginId';
-import HomePage from '../HomePage';
+import React from 'react'
+import { Switch, Route } from 'react-router-dom'
+import { NotFound } from '@strapi/helper-plugin'
+import pluginId from '../../pluginId'
+import HomePage from '../HomePage'
 
 const App = () => {
   return (
@@ -19,7 +19,7 @@ const App = () => {
         <Route component={NotFound} />
       </Switch>
     </div>
-  );
-};
+  )
+}
 
-export default App;
+export default App
diff --git a/node_modules/strapi-plugin-multi-tenant/admin/src/pages/HomePage/index.js b/node_modules/strapi-plugin-multi-tenant/admin/src/pages/HomePage/index.js
index d807766..f691e2e 100644
--- a/node_modules/strapi-plugin-multi-tenant/admin/src/pages/HomePage/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/admin/src/pages/HomePage/index.js
@@ -4,9 +4,9 @@
  *
  */
 
-import React from 'react';
+import React from 'react'
 // import PropTypes from 'prop-types';
-import pluginId from '../../pluginId';
+import pluginId from '../../pluginId'
 
 const HomePage = () => {
   return (
@@ -14,7 +14,7 @@ const HomePage = () => {
       <h1>{pluginId}&apos;s HomePage</h1>
       <p>Happy coding</p>
     </div>
-  );
-};
+  )
+}
 
-export default HomePage;
+export default HomePage
diff --git a/node_modules/strapi-plugin-multi-tenant/admin/src/pluginId.js b/node_modules/strapi-plugin-multi-tenant/admin/src/pluginId.js
index 695317c..988dcf2 100644
--- a/node_modules/strapi-plugin-multi-tenant/admin/src/pluginId.js
+++ b/node_modules/strapi-plugin-multi-tenant/admin/src/pluginId.js
@@ -1,5 +1,8 @@
-import pluginPkg from '../../package.json';
+import pluginPkg from '../../package.json'
 
-const pluginId = pluginPkg.name.replace(/^(@[^-,.][\w,-]+\/|strapi-)plugin-/i, '');
+const pluginId = pluginPkg.name.replace(
+  /^(@[^-,.][\w,-]+\/|strapi-)plugin-/i,
+  ''
+)
 
-export default pluginId;
+export default pluginId
diff --git a/node_modules/strapi-plugin-multi-tenant/admin/src/utils/axiosInstance.js b/node_modules/strapi-plugin-multi-tenant/admin/src/utils/axiosInstance.js
index 3d03d75..a59aafd 100644
--- a/node_modules/strapi-plugin-multi-tenant/admin/src/utils/axiosInstance.js
+++ b/node_modules/strapi-plugin-multi-tenant/admin/src/utils/axiosInstance.js
@@ -2,12 +2,12 @@
  * axios with a custom config.
  */
 
-import axios from 'axios';
-import { auth } from '@strapi/helper-plugin';
+import axios from 'axios'
+import { auth } from '@strapi/helper-plugin'
 
 const instance = axios.create({
   baseURL: process.env.STRAPI_ADMIN_BACKEND_URL,
-});
+})
 
 instance.interceptors.request.use(
   async (config) => {
@@ -15,26 +15,26 @@ instance.interceptors.request.use(
       Authorization: `Bearer ${auth.getToken()}`,
       Accept: 'application/json',
       'Content-Type': 'application/json',
-    };
+    }
 
-    return config;
+    return config
   },
   (error) => {
-    Promise.reject(error);
+    Promise.reject(error)
   }
-);
+)
 
 instance.interceptors.response.use(
   (response) => response,
   (error) => {
     // whatever you want to do with the error
     if (error.response?.status === 401) {
-      auth.clearAppStorage();
-      window.location.reload();
+      auth.clearAppStorage()
+      window.location.reload()
     }
 
-    throw error;
+    throw error
   }
-);
+)
 
-export default instance;
+export default instance
diff --git a/node_modules/strapi-plugin-multi-tenant/admin/src/utils/getTrad.js b/node_modules/strapi-plugin-multi-tenant/admin/src/utils/getTrad.js
index d0a071b..b376d54 100644
--- a/node_modules/strapi-plugin-multi-tenant/admin/src/utils/getTrad.js
+++ b/node_modules/strapi-plugin-multi-tenant/admin/src/utils/getTrad.js
@@ -1,5 +1,5 @@
-import pluginId from '../pluginId';
+import pluginId from '../pluginId'
 
-const getTrad = (id) => `${pluginId}.${id}`;
+const getTrad = (id) => `${pluginId}.${id}`
 
-export default getTrad;
+export default getTrad
diff --git a/node_modules/strapi-plugin-multi-tenant/server/bootstrap.js b/node_modules/strapi-plugin-multi-tenant/server/bootstrap.js
index 72d1262..585c5ac 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/bootstrap.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/bootstrap.js
@@ -1,14 +1,14 @@
-"use strict";
+'use strict'
 
 module.exports = async ({ strapi }) => {
   const actions = [
     {
-      section: "plugins",
-      displayName: "Read",
-      uid: "read",
-      pluginName: "multi-tenant",
+      section: 'plugins',
+      displayName: 'Read',
+      uid: 'read',
+      pluginName: 'multi-tenant',
     },
-  ];
+  ]
 
-  await strapi.admin.services.permission.actionProvider.registerMany(actions);
-};
+  await strapi.admin.services.permission.actionProvider.registerMany(actions)
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/config/index.js b/node_modules/strapi-plugin-multi-tenant/server/config/index.js
index 56b5ae6..e3bc0c3 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/config/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/config/index.js
@@ -1,6 +1,6 @@
-'use strict';
+'use strict'
 
 module.exports = {
   default: {},
   validator() {},
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/content-types/index.js b/node_modules/strapi-plugin-multi-tenant/server/content-types/index.js
index 1150c10..52b0503 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/content-types/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/content-types/index.js
@@ -1,7 +1,7 @@
-const userGroup = require("./user-group");
-const organization = require("./organization");
+const userGroup = require('./user-group')
+const organization = require('./organization')
 
 module.exports = {
   organization,
-  "user-group": userGroup,
-};
+  'user-group': userGroup,
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/content-types/organization/index.js b/node_modules/strapi-plugin-multi-tenant/server/content-types/organization/index.js
index e1d0336..44802ec 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/content-types/organization/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/content-types/organization/index.js
@@ -1,5 +1,5 @@
-const organizationSchema = require("./schema");
+const organizationSchema = require('./schema')
 
 module.exports = {
   schema: organizationSchema,
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/content-types/organization/schema.json b/node_modules/strapi-plugin-multi-tenant/server/content-types/organization/schema.json
index 0f50e33..997bd71 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/content-types/organization/schema.json
+++ b/node_modules/strapi-plugin-multi-tenant/server/content-types/organization/schema.json
@@ -11,14 +11,14 @@
     "comment": ""
   },
   "attributes": {
-        "name": {
-            "type": "string"
-        },
-        "userGroups": {
-            "type": "relation",
-            "relation": "oneToMany",
-            "target": "plugin::multi-tenant.user-group",
-            "mappedBy": "organization"
-        }
+    "name": {
+      "type": "string"
+    },
+    "userGroups": {
+      "type": "relation",
+      "relation": "oneToMany",
+      "target": "plugin::multi-tenant.user-group",
+      "mappedBy": "organization"
+    }
   }
 }
\ No newline at end of file
diff --git a/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/index.js b/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/index.js
index 9774f93..5a8b8fc 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/index.js
@@ -1,7 +1,7 @@
-const userGroupSchema = require("./schema");
-const userGroupLifecycles = require("./lifecycles");
+const userGroupSchema = require('./schema')
+const userGroupLifecycles = require('./lifecycles')
 
 module.exports = {
   schema: userGroupSchema,
   lifecycles: userGroupLifecycles,
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/lifecycles.js b/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/lifecycles.js
index 4a74647..e78ef72 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/lifecycles.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/lifecycles.js
@@ -1,23 +1,23 @@
-const { ValidationError } = require("@strapi/utils").errors;
+const { ValidationError } = require('@strapi/utils').errors
 
 module.exports = {
   beforeCreate(event) {
-    const { parent, children } = event.params.data;
+    const { parent, children } = event.params.data
 
-    if (children?.includes(parent)) {
-      throw new ValidationError("User group cannot be both child and parent");
+    if (children?.includes && children?.includes(parent)) {
+      throw new ValidationError('User group cannot be both child and parent')
     }
   },
   beforeUpdate(event) {
-    const { parent, children } = event.params.data;
-    const { id } = event.params.where;
+    const { parent, children } = event.params.data
+    const { id } = event.params.where
 
-    if (children?.includes(parent)) {
-      throw new ValidationError("User group cannot be both child and parent");
+    if (children?.includes && children?.includes(parent)) {
+      throw new ValidationError('User group cannot be both child and parent')
     }
 
-    if (children?.includes(id) || parent === id) {
-      throw new ValidationError("User group cannot be its own child or parent");
+    if (children?.includes && (children?.includes(id) || parent === id)) {
+      throw new ValidationError('User group cannot be its own child or parent')
     }
   },
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/schema.json b/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/schema.json
index e69d68f..005cc1b 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/schema.json
+++ b/node_modules/strapi-plugin-multi-tenant/server/content-types/user-group/schema.json
@@ -1,4 +1,3 @@
-
 {
   "kind": "collectionType",
   "collectionName": "user_groups",
@@ -13,31 +12,31 @@
   },
   "attributes": {
     "name": {
-        "type": "string"
+      "type": "string"
     },
     "users": {
-        "type": "relation",
-        "relation": "oneToMany",
-        "target": "plugin::users-permissions.user"
+      "type": "relation",
+      "relation": "oneToMany",
+      "target": "plugin::users-permissions.user"
     },
     "organization": {
-        "type": "relation",
-        "relation": "manyToOne",
-        "target": "plugin::multi-tenant.organization",
-        "inversedBy": "userGroups",
-        "required": true
+      "type": "relation",
+      "relation": "manyToOne",
+      "target": "plugin::multi-tenant.organization",
+      "inversedBy": "userGroups",
+      "required": true
     },
     "parent": {
-        "type": "relation",
-        "relation": "manyToOne",
-        "target": "plugin::multi-tenant.user-group",
-        "inversedBy": "children"
+      "type": "relation",
+      "relation": "manyToOne",
+      "target": "plugin::multi-tenant.user-group",
+      "inversedBy": "children"
     },
     "children": {
-        "type": "relation",
-        "relation": "oneToMany",
-        "target": "plugin::multi-tenant.user-group",
-        "mappedBy": "parent"
+      "type": "relation",
+      "relation": "oneToMany",
+      "target": "plugin::multi-tenant.user-group",
+      "mappedBy": "parent"
     }
   }
 }
diff --git a/node_modules/strapi-plugin-multi-tenant/server/controllers/index.js b/node_modules/strapi-plugin-multi-tenant/server/controllers/index.js
index 12284e4..64ef021 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/controllers/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/controllers/index.js
@@ -1,7 +1,7 @@
-const userGroup = require("./user-group");
-const organization = require("./organization");
+const userGroup = require('./user-group')
+const organization = require('./organization')
 
 module.exports = {
-  "user-group": userGroup,
+  'user-group': userGroup,
   organization,
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/controllers/organization.js b/node_modules/strapi-plugin-multi-tenant/server/controllers/organization.js
index 702d01e..55e3d9d 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/controllers/organization.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/controllers/organization.js
@@ -1,3 +1,3 @@
-const { createCoreController } = require("@strapi/strapi").factories;
+const { createCoreController } = require('@strapi/strapi').factories
 
-module.exports = createCoreController("plugin::multi-tenant.organization");
+module.exports = createCoreController('plugin::multi-tenant.organization')
diff --git a/node_modules/strapi-plugin-multi-tenant/server/controllers/user-group.js b/node_modules/strapi-plugin-multi-tenant/server/controllers/user-group.js
index e3c88d3..43e7c4c 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/controllers/user-group.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/controllers/user-group.js
@@ -1,3 +1,3 @@
-const { createCoreController } = require("@strapi/strapi").factories;
+const { createCoreController } = require('@strapi/strapi').factories
 
-module.exports = createCoreController("plugin::multi-tenant.user-group");
+module.exports = createCoreController('plugin::multi-tenant.user-group')
diff --git a/node_modules/strapi-plugin-multi-tenant/server/destroy.js b/node_modules/strapi-plugin-multi-tenant/server/destroy.js
index 75f32f4..f562c82 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/destroy.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/destroy.js
@@ -1,5 +1,5 @@
-'use strict';
+'use strict'
 
 module.exports = ({ strapi }) => {
   // destroy phase
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/index.js b/node_modules/strapi-plugin-multi-tenant/server/index.js
index 5b524b1..41260a8 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/index.js
@@ -1,15 +1,15 @@
-'use strict';
+'use strict'
 
-const register = require('./register');
-const bootstrap = require('./bootstrap');
-const destroy = require('./destroy');
-const config = require('./config');
-const contentTypes = require('./content-types');
-const controllers = require('./controllers');
-const routes = require('./routes');
-const middlewares = require('./middlewares');
-const policies = require('./policies');
-const services = require('./services');
+const register = require('./register')
+const bootstrap = require('./bootstrap')
+const destroy = require('./destroy')
+const config = require('./config')
+const contentTypes = require('./content-types')
+const controllers = require('./controllers')
+const routes = require('./routes')
+const middlewares = require('./middlewares')
+const policies = require('./policies')
+const services = require('./services')
 
 module.exports = {
   register,
@@ -22,4 +22,4 @@ module.exports = {
   contentTypes,
   policies,
   middlewares,
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/middlewares/add-same-user-group.js b/node_modules/strapi-plugin-multi-tenant/server/middlewares/add-same-user-group.js
index 21bf5eb..8902a59 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/middlewares/add-same-user-group.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/middlewares/add-same-user-group.js
@@ -2,46 +2,46 @@ module.exports = (config, { strapi }) => {
   return async (ctx, next) => {
     if (ctx.state.user) {
       const loggedUserUserGroup = await strapi
-        .query("plugin::multi-tenant.user-group")
+        .query('plugin::multi-tenant.user-group')
         .findOne({
           where: {
             users: {
               id: { $in: ctx.state.user.id },
             },
           },
-        });
+        })
 
       if (!loggedUserUserGroup) {
-        return ctx.badRequest("User does not belong to a user group");
+        return ctx.badRequest('User does not belong to a user group')
       }
 
       if (config.attribute && !ctx.request.body?.data?.[config.attribute]) {
-        return ctx.badRequest(`Request body must include ${config.attribute}`);
+        return ctx.badRequest(`Request body must include ${config.attribute}`)
       }
 
       if (config.attribute) {
         const relationService = strapi.contentType(config.contentType)
-          ?.attributes?.[config.attribute].target;
-        const foreignKey = ctx.request.body?.data?.[config.attribute];
+          ?.attributes?.[config.attribute].target
+        const foreignKey = ctx.request.body?.data?.[config.attribute]
         const attributeId = Number.isInteger(foreignKey)
           ? foreignKey
-          : foreignKey.id;
+          : foreignKey.id
 
         const resourceToLink = await strapi.query(relationService).findOne({
           where: {
             id: attributeId,
           },
-          populate: ["userGroup"],
-        });
+          populate: ['userGroup'],
+        })
 
         if (!resourceToLink) {
           return ctx.notFound(
             `Resource "${config.attribute}" with ID ${attributeId} not found`
-          );
+          )
         }
 
         if (resourceToLink.userGroup.id !== loggedUserUserGroup.id) {
-          return ctx.forbidden();
+          return ctx.forbidden()
         }
 
         ctx.request.body = {
@@ -50,7 +50,7 @@ module.exports = (config, { strapi }) => {
             ...ctx.request.body.data,
             [config.attribute]: resourceToLink,
           },
-        };
+        }
       } else {
         ctx.request.body = {
           ...ctx.request.body,
@@ -58,10 +58,10 @@ module.exports = (config, { strapi }) => {
             ...ctx.request.body.data,
             userGroup: loggedUserUserGroup.id,
           },
-        };
+        }
       }
 
-      return await next();
+      return await next()
     }
-  };
-};
+  }
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/middlewares/find-hierarchy-user-group.js b/node_modules/strapi-plugin-multi-tenant/server/middlewares/find-hierarchy-user-group.js
new file mode 100644
index 0000000..66fbe5c
--- /dev/null
+++ b/node_modules/strapi-plugin-multi-tenant/server/middlewares/find-hierarchy-user-group.js
@@ -0,0 +1,74 @@
+module.exports = (config, { strapi }) => {
+  return async (ctx, next) => {
+    if (ctx.state.user) {
+
+/*      
+      const loggedUserUserGroup = await strapi
+        .query('plugin::multi-tenant.user-group')
+        .findOne({
+          where: {
+            users: {
+              id: { $in: ctx.state.user.id },
+            },
+          },
+        })
+*/
+
+      const loggedUserUserGroup = await strapi
+        .query('plugin::multi-tenant.user-group')
+        .findOne({
+          where: {
+            users: {
+              id: { $in: ctx.state.user.id },
+            },
+          },
+          populate: [
+            'organization',
+            'organization.userGroups',
+            'organization.userGroups.parent',
+          ],
+        })
+
+      const organizationUserGroups = loggedUserUserGroup.organization.userGroups
+      var loggedUserUserGroups = [ loggedUserUserGroup.id ]
+  
+      const findPath = (parentId) => {
+
+        const foundGroups = organizationUserGroups.filter(
+          (group) => group.parent?.id === parentId
+        )
+        foundGroups.forEach(element => {
+          loggedUserUserGroups = [...loggedUserUserGroups, element.id]
+          findPath(element)
+        });
+
+      }
+
+      findPath(loggedUserUserGroup.id)
+
+      ctx.query = {
+        ...ctx.query,
+        filters: {
+          ...ctx.query.filters,
+          ...(config.attribute
+            ? { $or: 
+              loggedUserUserGroups.map((data, idx) => (
+              {
+                [config.attribute]: {
+                userGroup: { id: data }
+                },
+              }))
+            }
+            : { $or: 
+              loggedUserUserGroups.map((data, idx) => (
+              { userGroup: { id: data } 
+              }))
+            }
+          )
+        },
+      }
+
+      await next()
+    }
+  }
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/middlewares/find-same-user-group.js b/node_modules/strapi-plugin-multi-tenant/server/middlewares/find-same-user-group.js
index f54f08a..1878ea0 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/middlewares/find-same-user-group.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/middlewares/find-same-user-group.js
@@ -2,14 +2,14 @@ module.exports = (config, { strapi }) => {
   return async (ctx, next) => {
     if (ctx.state.user) {
       const loggedUserUserGroup = await strapi
-        .query("plugin::multi-tenant.user-group")
+        .query('plugin::multi-tenant.user-group')
         .findOne({
           where: {
             users: {
               id: { $in: ctx.state.user.id },
             },
           },
-        });
+        })
 
       ctx.query = {
         ...ctx.query,
@@ -23,9 +23,9 @@ module.exports = (config, { strapi }) => {
               }
             : { userGroup: { id: loggedUserUserGroup.id } }),
         },
-      };
+      }
 
-      await next();
+      await next()
     }
-  };
-};
+  }
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/middlewares/index.js b/node_modules/strapi-plugin-multi-tenant/server/middlewares/index.js
index b7971d7..94b2ce8 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/middlewares/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/middlewares/index.js
@@ -1,7 +1,9 @@
-const findSameUserGroup = require("./find-same-user-group");
-const addSameUserGroup = require("./add-same-user-group");
+const findSameUserGroup = require('./find-same-user-group')
+const addSameUserGroup = require('./add-same-user-group')
+const findHierarchyUserGroup = require('./find-hierarchy-user-group')
 
 module.exports = {
-  "find-same-user-group": findSameUserGroup,
-  "add-same-user-group": addSameUserGroup,
-};
+  'find-same-user-group': findSameUserGroup,
+  'add-same-user-group': addSameUserGroup,
+  'find-hierarchy-user-group': findHierarchyUserGroup,
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/policies/index.js b/node_modules/strapi-plugin-multi-tenant/server/policies/index.js
index f61b183..0d6e60d 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/policies/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/policies/index.js
@@ -1,5 +1,5 @@
-const isSameUserGroup = require("./is-same-user-group");
+const isSameUserGroup = require('./is-same-user-group')
 
 module.exports = {
-  "is-same-user-group": isSameUserGroup,
-};
+  'is-same-user-group': isSameUserGroup,
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/policies/is-same-user-group.js b/node_modules/strapi-plugin-multi-tenant/server/policies/is-same-user-group.js
index f357f14..737bc3f 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/policies/is-same-user-group.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/policies/is-same-user-group.js
@@ -4,27 +4,44 @@ module.exports = async (policyContext, config, { strapi }) => {
       where: { id: policyContext.params.id },
       populate: config.attribute
         ? [`${config.attribute}.userGroup`]
-        : ["userGroup"],
-    });
+        : ['userGroup'],
+    })
 
-    const loggedUserUserGroup = await strapi
-      .query("plugin::multi-tenant.user-group")
-      .findOne({
-        where: {
-          users: {
-            id: { $in: policyContext.state.user.id },
-          },
-        },
-      });
+    if (resource) {
+      const userGroupIds = await strapi
+        .service('plugin::multi-tenant.user-group')
+        .findAllowed(policyContext.state.user.id)
 
-    const resourceUserGroup = config.attribute
-      ? resource?.[config.attribute]?.userGroup
-      : resource?.userGroup;
+      if (policyContext.request.body?.data) {
+        // don't allow updating a relation if user doesn't own it
+        const requestData = policyContext.request.body?.data
+        const requestDataUserGroup = config.attribute
+          ? requestData[config.attribute]?.userGroup
+          : requestData.userGroup
 
-    return (
-      loggedUserUserGroup && resourceUserGroup?.id === loggedUserUserGroup.id
-    );
+        const requestDataUserGroupId =
+          requestDataUserGroup && Number.isInteger(requestDataUserGroup)
+            ? requestDataUserGroup
+            : requestDataUserGroup.id
+
+        if (!userGroupIds.includes(requestDataUserGroupId)) {
+          return false
+        }
+      }
+
+      const resourceUserGroup = config.attribute
+        ? resource[config.attribute]?.userGroup
+        : resource.userGroup
+
+      return (
+        userGroupIds.length &&
+        resourceUserGroup &&
+        userGroupIds.includes(resourceUserGroup?.id)
+      )
+    } else {
+      return false
+    }
   } else {
-    return false;
+    return false
   }
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/register.js b/node_modules/strapi-plugin-multi-tenant/server/register.js
index 437d48e..3f0c43c 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/register.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/register.js
@@ -1,5 +1,5 @@
-'use strict';
+'use strict'
 
 module.exports = ({ strapi }) => {
   // registeration phase
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/routes/index.js b/node_modules/strapi-plugin-multi-tenant/server/routes/index.js
index 5fc69f1..92049a8 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/routes/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/routes/index.js
@@ -1,4 +1,4 @@
 module.exports = {
-  userGroup: require("./user-group"),
-  organization: require("./organization"),
-};
+  userGroup: require('./user-group'),
+  organization: require('./organization'),
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/routes/organization.js b/node_modules/strapi-plugin-multi-tenant/server/routes/organization.js
index 30bc530..9c31e02 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/routes/organization.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/routes/organization.js
@@ -1,25 +1,25 @@
 module.exports = {
-  type: "content-api",
+  type: 'content-api',
   routes: [
     {
-      method: "GET",
+      method: 'GET',
       path: `/organizations/:id`,
       handler: `organization.findOne`,
     },
     {
-      method: "POST",
+      method: 'POST',
       path: `/organizations`,
       handler: `organization.create`,
     },
     {
-      method: "PUT",
+      method: 'PUT',
       path: `/organizations/:id`,
       handler: `organization.update`,
     },
     {
-      method: "DELETE",
+      method: 'DELETE',
       path: `/organizations/:id`,
       handler: `organization.delete`,
     },
   ],
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/routes/user-group.js b/node_modules/strapi-plugin-multi-tenant/server/routes/user-group.js
index f562f62..414aac7 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/routes/user-group.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/routes/user-group.js
@@ -1,30 +1,30 @@
 module.exports = {
-  type: "content-api",
+  type: 'content-api',
   routes: [
     {
-      method: "GET",
+      method: 'GET',
       path: `/user-groups`,
       handler: `user-group.find`,
     },
     {
-      method: "GET",
+      method: 'GET',
       path: `/user-groups/:id`,
       handler: `user-group.findOne`,
     },
     {
-      method: "POST",
+      method: 'POST',
       path: `/user-groups`,
       handler: `user-group.create`,
     },
     {
-      method: "PUT",
+      method: 'PUT',
       path: `/user-groups/:id`,
       handler: `user-group.update`,
     },
     {
-      method: "DELETE",
+      method: 'DELETE',
       path: `/user-groups/:id`,
       handler: `user-group.delete`,
     },
   ],
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/services/index.js b/node_modules/strapi-plugin-multi-tenant/server/services/index.js
index ed3da1f..b288062 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/services/index.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/services/index.js
@@ -1,7 +1,7 @@
-const organization = require("./organization");
-const userGroup = require("./userGroup");
+const organization = require('./organization')
+const userGroup = require('./userGroup')
 
 module.exports = {
-  "user-group": userGroup,
+  'user-group': userGroup,
   organization,
-};
+}
diff --git a/node_modules/strapi-plugin-multi-tenant/server/services/organization.js b/node_modules/strapi-plugin-multi-tenant/server/services/organization.js
index 323dac2..99d6bca 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/services/organization.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/services/organization.js
@@ -1,3 +1,3 @@
-const { createCoreService } = require("@strapi/strapi").factories;
+const { createCoreService } = require('@strapi/strapi').factories
 
-module.exports = createCoreService("plugin::multi-tenant.organization");
+module.exports = createCoreService('plugin::multi-tenant.organization')
diff --git a/node_modules/strapi-plugin-multi-tenant/server/services/userGroup.js b/node_modules/strapi-plugin-multi-tenant/server/services/userGroup.js
index ac9a65f..0b91da4 100644
--- a/node_modules/strapi-plugin-multi-tenant/server/services/userGroup.js
+++ b/node_modules/strapi-plugin-multi-tenant/server/services/userGroup.js
@@ -1,3 +1,41 @@
-const { createCoreService } = require("@strapi/strapi").factories;
+const { createCoreService } = require('@strapi/strapi').factories
 
-module.exports = createCoreService("plugin::multi-tenant.user-group");
+module.exports = createCoreService(
+  'plugin::multi-tenant.user-group',
+  ({ strapi }) => ({
+    async findAllowed(userId) {
+      const loggedUserUserGroup = await strapi
+        .query('plugin::multi-tenant.user-group')
+        .findOne({
+          where: {
+            users: {
+              id: { $in: [userId] },
+            },
+          },
+          populate: [
+            'organization',
+            'organization.userGroups',
+            'organization.userGroups.parent',
+          ],
+        })
+
+      const organizationUserGroups = loggedUserUserGroup.organization.userGroups
+      var loggedUserUserGroups = [ loggedUserUserGroup.id ]
+ 
+      const findPath = (parentId) => {
+
+        const foundGroups = organizationUserGroups.filter(
+          (group) => group.parent?.id === parentId
+        )
+        foundGroups.forEach(element => {
+          loggedUserUserGroups = [...loggedUserUserGroups, element.id]
+          findPath(element)
+        });
+
+      }
+
+      findPath(loggedUserUserGroup.id)
+      return loggedUserUserGroups
+    },
+  })
+)
